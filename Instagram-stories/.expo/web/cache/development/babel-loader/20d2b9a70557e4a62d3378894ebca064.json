{"ast":null,"code":"import EdgeInsetsPropType from \"../EdgeInsetsPropType\";\nimport StyleSheetPropType from \"../../modules/StyleSheetPropType\";\nimport ViewStylePropTypes from \"./ViewStylePropTypes\";\nimport { any, array, arrayOf, bool, func, object, oneOf, oneOfType, string } from 'prop-types';\nvar stylePropType = StyleSheetPropType(ViewStylePropTypes);\nvar ViewPropTypes = {\n  accessibilityComponentType: string,\n  accessibilityLabel: string,\n  accessibilityLiveRegion: oneOf(['assertive', 'none', 'polite']),\n  accessibilityRole: string,\n  accessibilityStates: arrayOf(oneOf(['disabled', 'selected', 'busy', 'checked', 'expanded', 'grabbed', 'invalid', 'pressed'])),\n  accessibilityTraits: oneOfType([array, string]),\n  accessible: bool,\n  children: any,\n  hitSlop: EdgeInsetsPropType,\n  importantForAccessibility: oneOf(['auto', 'no', 'no-hide-descendants', 'yes']),\n  nativeID: string,\n  onBlur: func,\n  onClick: func,\n  onClickCapture: func,\n  onFocus: func,\n  onLayout: func,\n  onMoveShouldSetResponder: func,\n  onMoveShouldSetResponderCapture: func,\n  onResponderGrant: func,\n  onResponderMove: func,\n  onResponderReject: func,\n  onResponderRelease: func,\n  onResponderTerminate: func,\n  onResponderTerminationRequest: func,\n  onStartShouldSetResponder: func,\n  onStartShouldSetResponderCapture: func,\n  onTouchCancel: func,\n  onTouchCancelCapture: func,\n  onTouchEnd: func,\n  onTouchEndCapture: func,\n  onTouchMove: func,\n  onTouchMoveCapture: func,\n  onTouchStart: func,\n  onTouchStartCapture: func,\n  pointerEvents: oneOf(['auto', 'box-none', 'box-only', 'none']),\n  style: stylePropType,\n  testID: string,\n  onContextMenu: func,\n  itemID: string,\n  itemRef: string,\n  itemProp: string,\n  itemScope: string,\n  itemType: string,\n  accessibilityViewIsModal: bool,\n  collapsable: bool,\n  needsOffscreenAlphaCompositing: bool,\n  onAccessibilityTap: func,\n  onMagicTap: func,\n  removeClippedSubviews: bool,\n  renderToHardwareTextureAndroid: bool,\n  shouldRasterizeIOS: bool,\n  tvParallaxProperties: object\n};\nexport default ViewPropTypes;","map":{"version":3,"sources":["/home/swapnil/Downloads/Instagram-master (2)/node_modules/react-native-web/src/exports/View/ViewPropTypes.js"],"names":["EdgeInsetsPropType","StyleSheetPropType","ViewStylePropTypes","any","array","arrayOf","bool","func","object","oneOf","oneOfType","string","stylePropType","ViewPropTypes","accessibilityComponentType","accessibilityLabel","accessibilityLiveRegion","accessibilityRole","accessibilityStates","accessibilityTraits","accessible","children","hitSlop","importantForAccessibility","nativeID","onBlur","onClick","onClickCapture","onFocus","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","onStartShouldSetResponderCapture","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","pointerEvents","style","testID","onContextMenu","itemID","itemRef","itemProp","itemScope","itemType","accessibilityViewIsModal","collapsable","needsOffscreenAlphaCompositing","onAccessibilityTap","onMagicTap","removeClippedSubviews","renderToHardwareTextureAndroid","shouldRasterizeIOS","tvParallaxProperties"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport EdgeInsetsPropType, { type EdgeInsetsProp } from '../EdgeInsetsPropType';\nimport StyleSheetPropType from '../../modules/StyleSheetPropType';\nimport ViewStylePropTypes from './ViewStylePropTypes';\nimport { any, array, arrayOf, bool, func, object, oneOf, oneOfType, string } from 'prop-types';\nimport { type StyleObj } from '../StyleSheet/StyleSheetTypes';\n\nconst stylePropType = StyleSheetPropType(ViewStylePropTypes);\n\nexport type ViewLayout = {\n  x: number,\n  y: number,\n  width: number,\n  height: number\n};\n\nexport type ViewLayoutEvent = {\n  nativeEvent: {\n    layout: ViewLayout\n  }\n};\n\nexport type ViewProps = {\n  accessibilityComponentType?: string,\n  accessibilityLabel?: string,\n  accessibilityLiveRegion?: 'none' | 'polite' | 'assertive',\n  accessibilityRole?: string,\n  accessibilityStates?: Array<string>,\n  accessibilityTraits?: string | Array<string>,\n  accessible?: boolean,\n  children?: any,\n  className?: string,\n  hitSlop?: EdgeInsetsProp,\n  importantForAccessibility?: 'auto' | 'yes' | 'no' | 'no-hide-descendants',\n  nativeID?: string,\n  onBlur?: Function,\n  onClick?: Function,\n  onClickCapture?: Function,\n  onFocus?: Function,\n  onLayout?: (event: ViewLayoutEvent) => void,\n  onResponderGrant?: Function,\n  onResponderMove?: Function,\n  onResponderReject?: Function,\n  onResponderRelease?: Function,\n  onResponderTerminate?: Function,\n  onResponderTerminationRequest?: Function,\n  onStartShouldSetResponder?: Function,\n  onStartShouldSetResponderCapture?: Function,\n  onMoveShouldSetResponder?: Function,\n  onMoveShouldSetResponderCapture?: Function,\n  onTouchCancel?: Function,\n  onTouchCancelCapture?: Function,\n  onTouchEnd?: Function,\n  onTouchEndCapture?: Function,\n  onTouchMove?: Function,\n  onTouchMoveCapture?: Function,\n  onTouchStart?: Function,\n  onTouchStartCapture?: Function,\n  pointerEvents?: 'box-none' | 'none' | 'box-only' | 'auto',\n  style?: StyleObj,\n  testID?: string,\n  // web extensions\n  onContextMenu?: Function,\n  itemID?: string,\n  itemRef?: string,\n  itemProp?: string,\n  itemScope?: string,\n  itemType?: string,\n  // compatibility with React Native\n  accessibilityViewIsModal?: boolean,\n  collapsable?: boolean,\n  needsOffscreenAlphaCompositing?: boolean,\n  onAccessibilityTap?: Function,\n  onMagicTap?: Function,\n  removeClippedSubviews?: boolean,\n  renderToHardwareTextureAndroid?: boolean,\n  shouldRasterizeIOS?: boolean,\n  tvParallaxProperties?: {}\n};\n\nconst ViewPropTypes = {\n  accessibilityComponentType: string,\n  accessibilityLabel: string,\n  accessibilityLiveRegion: oneOf(['assertive', 'none', 'polite']),\n  accessibilityRole: string,\n  accessibilityStates: arrayOf(\n    oneOf([\n      'disabled',\n      'selected',\n      /* web-only */\n      'busy',\n      'checked',\n      'expanded',\n      'grabbed',\n      'invalid',\n      'pressed'\n    ])\n  ),\n  accessibilityTraits: oneOfType([array, string]),\n  accessible: bool,\n  children: any,\n  hitSlop: EdgeInsetsPropType,\n  importantForAccessibility: oneOf(['auto', 'no', 'no-hide-descendants', 'yes']),\n  nativeID: string,\n  onBlur: func,\n  onClick: func,\n  onClickCapture: func,\n  onFocus: func,\n  onLayout: func,\n  onMoveShouldSetResponder: func,\n  onMoveShouldSetResponderCapture: func,\n  onResponderGrant: func,\n  onResponderMove: func,\n  onResponderReject: func,\n  onResponderRelease: func,\n  onResponderTerminate: func,\n  onResponderTerminationRequest: func,\n  onStartShouldSetResponder: func,\n  onStartShouldSetResponderCapture: func,\n  onTouchCancel: func,\n  onTouchCancelCapture: func,\n  onTouchEnd: func,\n  onTouchEndCapture: func,\n  onTouchMove: func,\n  onTouchMoveCapture: func,\n  onTouchStart: func,\n  onTouchStartCapture: func,\n  pointerEvents: oneOf(['auto', 'box-none', 'box-only', 'none']),\n  style: stylePropType,\n  testID: string,\n  // web extensions\n  onContextMenu: func,\n  itemID: string,\n  itemRef: string,\n  itemProp: string,\n  itemScope: string,\n  itemType: string,\n  // compatibility with React Native\n  accessibilityViewIsModal: bool,\n  collapsable: bool,\n  needsOffscreenAlphaCompositing: bool,\n  onAccessibilityTap: func,\n  onMagicTap: func,\n  removeClippedSubviews: bool,\n  renderToHardwareTextureAndroid: bool,\n  shouldRasterizeIOS: bool,\n  tvParallaxProperties: object\n};\n\nexport default ViewPropTypes;\n"]},"metadata":{},"sourceType":"module"}