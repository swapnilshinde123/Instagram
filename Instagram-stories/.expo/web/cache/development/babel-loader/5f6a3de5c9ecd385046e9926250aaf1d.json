{"ast":null,"code":"var accessibilityComponentTypeToRole = {\n  button: 'button',\n  none: 'presentation'\n};\nvar accessibilityTraitsToRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region'\n};\nvar accessibilityRoleToWebRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  imagebutton: null,\n  keyboardkey: null,\n  label: null,\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region',\n  text: null\n};\n\nvar propsToAriaRole = function propsToAriaRole(_ref) {\n  var accessibilityComponentType = _ref.accessibilityComponentType,\n      accessibilityRole = _ref.accessibilityRole,\n      accessibilityTraits = _ref.accessibilityTraits;\n\n  if (accessibilityRole) {\n    var inferredRole = accessibilityRoleToWebRole[accessibilityRole];\n\n    if (inferredRole !== null) {\n      return inferredRole || accessibilityRole;\n    }\n  }\n\n  if (accessibilityTraits) {\n    var trait = Array.isArray(accessibilityTraits) ? accessibilityTraits[0] : accessibilityTraits;\n    return accessibilityTraitsToRole[trait];\n  }\n\n  if (accessibilityComponentType) {\n    return accessibilityComponentTypeToRole[accessibilityComponentType];\n  }\n};\n\nexport default propsToAriaRole;","map":{"version":3,"sources":["/home/swapnil/Downloads/Instagram-master (2)/node_modules/react-native-web/src/modules/AccessibilityUtil/propsToAriaRole.js"],"names":["accessibilityComponentTypeToRole","button","none","accessibilityTraitsToRole","adjustable","header","image","link","search","summary","accessibilityRoleToWebRole","imagebutton","keyboardkey","label","text","propsToAriaRole","accessibilityComponentType","accessibilityRole","accessibilityTraits","inferredRole","trait","Array","isArray"],"mappings":"AASA,IAAMA,gCAAgC,GAAG;AACvCC,EAAAA,MAAM,EAAE,QAD+B;AAEvCC,EAAAA,IAAI,EAAE;AAFiC,CAAzC;AAKA,IAAMC,yBAAyB,GAAG;AAChCC,EAAAA,UAAU,EAAE,QADoB;AAEhCH,EAAAA,MAAM,EAAE,QAFwB;AAGhCI,EAAAA,MAAM,EAAE,SAHwB;AAIhCC,EAAAA,KAAK,EAAE,KAJyB;AAKhCC,EAAAA,IAAI,EAAE,MAL0B;AAMhCL,EAAAA,IAAI,EAAE,cAN0B;AAOhCM,EAAAA,MAAM,EAAE,QAPwB;AAQhCC,EAAAA,OAAO,EAAE;AARuB,CAAlC;AAWA,IAAMC,0BAA0B,GAAG;AACjCN,EAAAA,UAAU,EAAE,QADqB;AAEjCH,EAAAA,MAAM,EAAE,QAFyB;AAGjCI,EAAAA,MAAM,EAAE,SAHyB;AAIjCC,EAAAA,KAAK,EAAE,KAJ0B;AAKjCK,EAAAA,WAAW,EAAE,IALoB;AAMjCC,EAAAA,WAAW,EAAE,IANoB;AAOjCC,EAAAA,KAAK,EAAE,IAP0B;AAQjCN,EAAAA,IAAI,EAAE,MAR2B;AASjCL,EAAAA,IAAI,EAAE,cAT2B;AAUjCM,EAAAA,MAAM,EAAE,QAVyB;AAWjCC,EAAAA,OAAO,EAAE,QAXwB;AAYjCK,EAAAA,IAAI,EAAE;AAZ2B,CAAnC;;AAoBA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAIV;AAAA,MAHZC,0BAGY,QAHZA,0BAGY;AAAA,MAFZC,iBAEY,QAFZA,iBAEY;AAAA,MADZC,mBACY,QADZA,mBACY;;AACZ,MAAID,iBAAJ,EAAuB;AACrB,QAAME,YAAY,GAAGT,0BAA0B,CAACO,iBAAD,CAA/C;;AACA,QAAIE,YAAY,KAAK,IAArB,EAA2B;AAEzB,aAAOA,YAAY,IAAIF,iBAAvB;AACD;AACF;;AACD,MAAIC,mBAAJ,EAAyB;AACvB,QAAME,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcJ,mBAAd,IAAqCA,mBAAmB,CAAC,CAAD,CAAxD,GAA8DA,mBAA5E;AACA,WAAOf,yBAAyB,CAACiB,KAAD,CAAhC;AACD;;AACD,MAAIJ,0BAAJ,EAAgC;AAC9B,WAAOhB,gCAAgC,CAACgB,0BAAD,CAAvC;AACD;AACF,CAnBD;;AAqBA,eAAeD,eAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst accessibilityComponentTypeToRole = {\n  button: 'button',\n  none: 'presentation'\n};\n\nconst accessibilityTraitsToRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region'\n};\n\nconst accessibilityRoleToWebRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  imagebutton: null,\n  keyboardkey: null,\n  label: null,\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region',\n  text: null\n};\n\n/**\n * Provides compatibility with React Native's \"accessibilityTraits\" (iOS) and\n * \"accessibilityComponentType\" (Android), converting them to equivalent ARIA\n * roles.\n */\nconst propsToAriaRole = ({\n  accessibilityComponentType,\n  accessibilityRole,\n  accessibilityTraits\n}: Object) => {\n  if (accessibilityRole) {\n    const inferredRole = accessibilityRoleToWebRole[accessibilityRole];\n    if (inferredRole !== null) {\n      // ignore roles that don't map to web\n      return inferredRole || accessibilityRole;\n    }\n  }\n  if (accessibilityTraits) {\n    const trait = Array.isArray(accessibilityTraits) ? accessibilityTraits[0] : accessibilityTraits;\n    return accessibilityTraitsToRole[trait];\n  }\n  if (accessibilityComponentType) {\n    return accessibilityComponentTypeToRole[accessibilityComponentType];\n  }\n};\n\nexport default propsToAriaRole;\n"]},"metadata":{},"sourceType":"module"}