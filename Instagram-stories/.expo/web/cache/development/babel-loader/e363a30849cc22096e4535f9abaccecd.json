{"ast":null,"code":"import getBoundingClientRect from \"../../modules/getBoundingClientRect\";\nimport setValueForStyles from \"../../vendor/react-dom/setValueForStyles\";\n\nvar getRect = function getRect(node) {\n  var _getBoundingClientRec = getBoundingClientRect(node),\n      x = _getBoundingClientRec.x,\n      y = _getBoundingClientRec.y,\n      top = _getBoundingClientRec.top,\n      left = _getBoundingClientRec.left;\n\n  var width = node.offsetWidth;\n  var height = node.offsetHeight;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: top,\n    left: left\n  };\n};\n\nvar _measureLayout = function measureLayout(node, relativeToNativeNode, callback) {\n  var relativeNode = relativeToNativeNode || node && node.parentNode;\n\n  if (node && relativeNode) {\n    setTimeout(function () {\n      var relativeRect = getBoundingClientRect(relativeNode);\n\n      var _getRect = getRect(node),\n          height = _getRect.height,\n          left = _getRect.left,\n          top = _getRect.top,\n          width = _getRect.width;\n\n      var x = left - relativeRect.left;\n      var y = top - relativeRect.top;\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\n\nvar focusableElements = {\n  A: true,\n  INPUT: true,\n  SELECT: true,\n  TEXTAREA: true\n};\nvar UIManager = {\n  blur: function blur(node) {\n    try {\n      node.blur();\n    } catch (err) {}\n  },\n  focus: function focus(node) {\n    try {\n      var name = node.nodeName;\n\n      if (node.getAttribute('tabIndex') == null && focusableElements[name] == null) {\n        node.setAttribute('tabIndex', '-1');\n      }\n\n      node.focus();\n    } catch (err) {}\n  },\n  measure: function measure(node, callback) {\n    _measureLayout(node, null, callback);\n  },\n  measureInWindow: function measureInWindow(node, callback) {\n    if (node) {\n      setTimeout(function () {\n        var _getRect2 = getRect(node),\n            height = _getRect2.height,\n            left = _getRect2.left,\n            top = _getRect2.top,\n            width = _getRect2.width;\n\n        callback(left, top, width, height);\n      }, 0);\n    }\n  },\n  measureLayout: function measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\n    _measureLayout(node, relativeToNativeNode, onSuccess);\n  },\n  updateView: function updateView(node, props, component) {\n    for (var prop in props) {\n      if (!Object.prototype.hasOwnProperty.call(props, prop)) {\n        continue;\n      }\n\n      var value = props[prop];\n\n      switch (prop) {\n        case 'style':\n          {\n            setValueForStyles(node, value, component._reactInternalInstance);\n            break;\n          }\n\n        case 'class':\n        case 'className':\n          {\n            node.setAttribute('class', value);\n            break;\n          }\n\n        case 'text':\n        case 'value':\n          node.value = value;\n          break;\n\n        default:\n          node.setAttribute(prop, value);\n      }\n    }\n  },\n  configureNextLayoutAnimation: function configureNextLayoutAnimation(config, onAnimationDidEnd) {\n    onAnimationDidEnd();\n  },\n  setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental() {}\n};\nexport default UIManager;","map":{"version":3,"sources":["/home/swapnil/Downloads/Instagram-master (2)/node_modules/react-native-web/src/exports/UIManager/index.js"],"names":["getBoundingClientRect","setValueForStyles","getRect","node","x","y","top","left","width","offsetWidth","height","offsetHeight","measureLayout","relativeToNativeNode","callback","relativeNode","parentNode","setTimeout","relativeRect","focusableElements","A","INPUT","SELECT","TEXTAREA","UIManager","blur","err","focus","name","nodeName","getAttribute","setAttribute","measure","measureInWindow","onFail","onSuccess","updateView","props","component","prop","Object","prototype","hasOwnProperty","call","value","_reactInternalInstance","configureNextLayoutAnimation","config","onAnimationDidEnd","setLayoutAnimationEnabledExperimental"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport setValueForStyles from '../../vendor/react-dom/setValueForStyles';\n\nconst getRect = node => {\n  // Unlike the DOM's getBoundingClientRect, React Native layout measurements\n  // for \"height\" and \"width\" ignore scale transforms.\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements\n  const { x, y, top, left } = getBoundingClientRect(node);\n  const width = node.offsetWidth;\n  const height = node.offsetHeight;\n  return { x, y, width, height, top, left };\n};\n\nconst measureLayout = (node, relativeToNativeNode, callback) => {\n  const relativeNode = relativeToNativeNode || (node && node.parentNode);\n  if (node && relativeNode) {\n    setTimeout(() => {\n      const relativeRect = getBoundingClientRect(relativeNode);\n      const { height, left, top, width } = getRect(node);\n      const x = left - relativeRect.left;\n      const y = top - relativeRect.top;\n      callback(x, y, width, height, left, top);\n    }, 0);\n  }\n};\n\nconst focusableElements = {\n  A: true,\n  INPUT: true,\n  SELECT: true,\n  TEXTAREA: true\n};\n\nconst UIManager = {\n  blur(node) {\n    try {\n      node.blur();\n    } catch (err) {}\n  },\n\n  focus(node) {\n    try {\n      const name = node.nodeName;\n      // A tabIndex of -1 allows element to be programmatically focused but\n      // prevents keyboard focus, so we don't want to set the value on elements\n      // that support keyboard focus by default.\n      if (node.getAttribute('tabIndex') == null && focusableElements[name] == null) {\n        node.setAttribute('tabIndex', '-1');\n      }\n      node.focus();\n    } catch (err) {}\n  },\n\n  measure(node, callback) {\n    measureLayout(node, null, callback);\n  },\n\n  measureInWindow(node, callback) {\n    if (node) {\n      setTimeout(() => {\n        const { height, left, top, width } = getRect(node);\n        callback(left, top, width, height);\n      }, 0);\n    }\n  },\n\n  measureLayout(node, relativeToNativeNode, onFail, onSuccess) {\n    measureLayout(node, relativeToNativeNode, onSuccess);\n  },\n\n  updateView(node, props, component /* only needed to surpress React errors in development */) {\n    for (const prop in props) {\n      if (!Object.prototype.hasOwnProperty.call(props, prop)) {\n        continue;\n      }\n\n      const value = props[prop];\n      switch (prop) {\n        case 'style': {\n          setValueForStyles(node, value, component._reactInternalInstance);\n          break;\n        }\n        case 'class':\n        case 'className': {\n          node.setAttribute('class', value);\n          break;\n        }\n        case 'text':\n        case 'value':\n          // native platforms use `text` prop to replace text input value\n          node.value = value;\n          break;\n        default:\n          node.setAttribute(prop, value);\n      }\n    }\n  },\n\n  configureNextLayoutAnimation(config, onAnimationDidEnd) {\n    onAnimationDidEnd();\n  },\n\n  // mocks\n  setLayoutAnimationEnabledExperimental() {}\n};\n\nexport default UIManager;\n"]},"metadata":{},"sourceType":"module"}